===== AllCode.txt =====


===== Cargo.toml =====
[package]
name    = "tsqc"
version = "0.1.0"
edition = "2024"
license = "MIT OR Apache-2.0"

[lib]
# Build both a Rust static lib (for tests & other crates) *and* a cdylib for PyO3.
crate-type = ["rlib", "cdylib"]

[dependencies]
pyo3        = { version = "0.25.1", features = ["extension-module"] }
bitvec      = "1.0"
rand        = "0.8"
rand_chacha = "0.3"

[dev-dependencies]
approx = "0.5"

[package.metadata.maturin]
python-packages = ["tsqc"]          # neem het hele tsqc-package op



===== pyproject.toml =====
[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "tsqc"
version = "0.1.0"
description = "Tabu Search for Quasi-Cliques (Rust core, Python bindings)"
requires-python = ">=3.9"
authors = [{ name = "Your Name", email = "you@example.com" }]
license = { text = "MIT OR Apache-2.0" }
readme = "README.md"

[tool.maturin]
#  The compiled extension will be installed as tsqc/_native.* (pyd/so)
module-name     = "tsqc._native"
#  Include the entire pure-Python package in the wheel
python-packages = ["tsqc"]
#  Build in release mode by default when 'maturin develop -r' is used

===== quick_check.py =====
from pathlib import Path
from tsqc.data_loader import load_dimacs

n, edges = load_dimacs(Path("benchmarks/hamming8-4.clq"))
print(f"n={n}, |E|={len(edges)}")

===== README.md =====
# TSQC – Tabu Search for Quasi-Cliques in Rust

===== src\construct.rs =====
//! Constructors for an initial subset *S*.
//!
//! • `random_k`
//! • `greedy_k`
//! • `greedy_random_k`
//! • `greedy_until_gamma` – grow until density ≥ γ and can’t be enlarged
//!
//! All functions return a ready-to-use [`Solution`].

use crate::{graph::Graph, solution::Solution};
use rand::seq::SliceRandom;
use rand::Rng;

/*───────────────────────────────────────────────────────────*/
/*  Random-k                                                 */
/*───────────────────────────────────────────────────────────*/

pub fn random_k<'g, R>(graph: &'g Graph, k: usize, rng: &mut R) -> Solution<'g>
where
    R: Rng + ?Sized,
{
    assert!(k <= graph.n());
    let mut idx: Vec<usize> = (0..graph.n()).collect();
    idx.shuffle(rng);

    let mut sol = Solution::new(graph);
    for &v in &idx[..k] {
        sol.add(v);
    }
    sol
}

/*───────────────────────────────────────────────────────────*/
/*  Greedy-k                                                 */
/*───────────────────────────────────────────────────────────*/

pub fn greedy_k<'g>(graph: &'g Graph, k: usize) -> Solution<'g> {
    assert!(k <= graph.n());
    let mut idx: Vec<usize> = (0..graph.n()).collect();
    idx.sort_unstable_by_key(|&v| std::cmp::Reverse(graph.degree(v)));

    let mut sol = Solution::new(graph);
    for &v in &idx[..k] {
        sol.add(v);
    }
    sol
}

/*───────────────────────────────────────────────────────────*/
/*  Greedy-random-k                                          */
/*───────────────────────────────────────────────────────────*/

pub fn greedy_random_k<'g, R>(graph: &'g Graph, k: usize, rng: &mut R) -> Solution<'g>
where
    R: Rng + ?Sized,
{
    assert!(k <= graph.n());

    let mut sol = Solution::new(graph);
    sol.add(rng.gen_range(0..graph.n())); // random seed

    while sol.size() < k {
        let mut best_edges = 0usize;
        let mut cand       = Vec::new();

        for v in 0..graph.n() {
            if sol.bitset()[v] { continue; }
            let edges = graph.neigh_row(v)
                .iter_ones()
                .filter(|&u| sol.bitset()[u])
                .count();
            if edges > best_edges {
                best_edges = edges;
                cand.clear();
                cand.push(v);
            } else if edges == best_edges {
                cand.push(v);
            }
        }
        sol.add(*cand.choose(rng).unwrap());
    }
    sol
}

/*───────────────────────────────────────────────────────────*/
/*  Greedy until γ-density cannot grow further               */
/*───────────────────────────────────────────────────────────*/

/// Grow *S* while density remains ≥ `gamma`.  
/// Uses the **internal-neighbour** count (as in the thesis) and random
/// tie-breaking every iteration.  Stops when inserting any outsider
/// would drop the density below `gamma`.
pub fn greedy_until_gamma<'g, R>(
    graph: &'g Graph,
    gamma: f64,
    rng: &mut R,
) -> Solution<'g>
where
    R: Rng + ?Sized,
{
    assert!((0.0..=1.0).contains(&gamma));

    /*── start with a random edge (or two random vertices) ──────────*/
    let mut sol = Solution::new(graph);
    let mut verts: Vec<usize> = (0..graph.n()).collect();
    verts.shuffle(rng);

    let mut edge_found = false;
    'edge: for &u in &verts {
        for &v in &verts {
            if u < v && graph.neigh_row(u)[v] {
                sol.add(u);
                sol.add(v);
                edge_found = true;
                break 'edge;
            }
        }
    }
    if !edge_found {
        sol.add(verts[0]);
        sol.add(verts[1]);
    }

    /*── greedy expansion with shuffle each round ───────────────────*/
    loop {
        let mut outsiders: Vec<usize> =
            (0..graph.n()).filter(|&v| !sol.bitset()[v]).collect();
        if outsiders.is_empty() { break; }

        outsiders.shuffle(rng);   // random tie-break every iteration

        // compute max neighbour count inside S
        let mut best_edges = 0usize;
        for &v in &outsiders {
            let e = graph.neigh_row(v)
                .iter_ones()
                .filter(|&u| sol.bitset()[u])
                .count();
            best_edges = best_edges.max(e);
        }

        // collect all outsiders achieving that max
        let mut cand: Vec<usize> = outsiders.into_iter()
            .filter(|&v| {
                graph.neigh_row(v)
                    .iter_ones()
                    .filter(|&u| sol.bitset()[u])
                    .count() == best_edges
            })
            .collect();
        if cand.is_empty() { break; }

        let v = *cand.choose(rng).unwrap();
        sol.add(v);
        if sol.density() + f64::EPSILON < gamma {
            sol.remove(v);
            break;          // no further vertex can be inserted
        }
    }

    /*── last-chance scan: try any remaining outsiders once ─────────*/
    let mut outsiders: Vec<usize> =
        (0..graph.n()).filter(|&v| !sol.bitset()[v]).collect();
    outsiders.shuffle(rng);
    for v in outsiders {
        sol.add(v);
        if sol.density() + f64::EPSILON < gamma {
            sol.remove(v);
        }
    }

    sol
}

/*──────────────────────── tests ───────────────────────────*/

#[cfg(test)]
mod tests {
    use super::*;
    use rand_chacha::ChaCha8Rng;
    use rand::SeedableRng;
    use std::io::Cursor;

    fn triangle() -> Graph {
        let dimacs = b"p edge 3 3\ne 1 2\ne 1 3\ne 2 3\n";
        Graph::parse_dimacs(Cursor::new(dimacs)).unwrap()
    }

    #[test]
    fn until_gamma_maximal() {
        let g = triangle();
        let mut rng = ChaCha8Rng::seed_from_u64(7);
        let sol = greedy_until_gamma(&g, 0.8, &mut rng);
        assert!(sol.density() >= 0.8);
        for v in 0..g.n() {
            if sol.bitset()[v] { continue; }
            let mut tmp = sol.clone();
            tmp.add(v);
            assert!(tmp.density() < 0.8);
        }
    }
}

===== src\diversify.rs =====
//! Diversification operators for TSQC (applied when the search is stuck in a local optimum).
//!
//! Heavy perturbation introduces a large disruption: it swaps out one vertex from the solution
//! for a very low-degree vertex not in the solution, producing a worse (lower-density) interim
//! solution to escape a local optimum. Mild perturbation is a smaller change: it swaps out a
//! “critical” vertex (one of the least connected in S) for a well-connected outsider, often
//! yielding only a slight decrease in density.  Both moves reset the tabu lists, and the search
//! then continues from the perturbed solution.

use crate::{solution::Solution, tabu::DualTabu, params::Params};
use rand::seq::SliceRandom;
use rand::Rng;

/*───────────────────────────────────────────────────────────────────*/
/*  Heavy perturbation                                               */
/*───────────────────────────────────────────────────────────────────*/

/// Heavy perturbation: remove one random vertex from S, then add an outsider with very few
/// connections to S.
///
/// A “low-degree” outside vertex is chosen (degree < *h* in the current S) such that the new
/// solution is worse (density decreases), helping the search jump to a new region.  The tabu
/// lists are **reset** after this move, clearing any short-term memory.  The parameter `p` is
/// used for `gamma_target` (quasi-clique density) in adaptive tenure updates.
pub fn heavy_perturbation<'g, R>(
    sol: &mut Solution<'g>,
    tabu: &mut DualTabu,
    rng: &mut R,
    p: &Params,
    freq: &mut [usize],
) where
    R: Rng + ?Sized,
{
    /* Guard */
    let k = sol.size();
    if k == 0 {
        return;
    }

    /* 1 ─ randomly remove one vertex from S */
    let mut inside: Vec<usize> = sol.bitset().iter_ones().collect();
    inside.shuffle(rng);
    let u = inside[0];
    sol.remove(u);

    /* 2 ─ determine threshold h for “low-degree” outsider.
     *     Heuristic: if the graph is very sparse, sqrt(k) may be too strict – use k^0.85. */
    let n = sol.graph().n();
    let graph_density = if n < 2 {
        0.0
    } else {
        2.0 * (sol.graph().m() as f64) / ((n * (n - 1)) as f64)
    };
    let mut h: f64 = if graph_density * (k as f64) <= 1.0 {
        // extremely sparse –- relax threshold
        (k as f64).powf(0.85)
    } else {
        (k as f64).sqrt()
    };
    h = h.clamp(1.0, k as f64 - 1.0).ceil();          // ensure 1 ≤ h ≤ k-1
    let h_thresh = h as usize;

    /* 3 ─ pick outsider with < h edges into current S */
    let mut outsiders: Vec<usize> =
        (0..sol.graph().n()).filter(|&v| !sol.bitset()[v]).collect();
    outsiders.shuffle(rng);

    let mut v_opt = None;
    for &w in &outsiders {
        let deg_in = sol
            .graph()
            .neigh_row(w)
            .iter_ones()
            .filter(|&j| sol.bitset()[j])
            .count();
        if deg_in < h_thresh {
            v_opt = Some(w);
            break;
        }
    }
    let v = v_opt.unwrap_or_else(|| {
        // no outsider below threshold – take one with minimal degree into S
        outsiders
            .iter()
            .copied()
            .min_by_key(|&w| {
                sol.graph()
                    .neigh_row(w)
                    .iter_ones()
                    .filter(|&j| sol.bitset()[j])
                    .count()
            })
            .unwrap()
    });
    sol.add(v);

    /* 4 ─ update long-term frequencies */
    for &vx in &[u, v] {
        freq[vx] += 1;
        if freq[vx] > k {
            freq.fill(0);
        }
    }

    /* 5 ─ adapt tabu tenures to new (worse) solution & reset lists */
    tabu.update_tenures(sol.size(), sol.edges(), p.gamma_target, rng);
    tabu.reset();
}

/*───────────────────────────────────────────────────────────────────*/
/*  Mild perturbation                                                */
/*───────────────────────────────────────────────────────────────────*/

/// Mild perturbation: swap worst vertex in S for best outsider (smallest drop in density).
///
/// Removes one critical vertex (lowest internal degree) and adds one outsider with the most
/// edges into S.  Often only slightly degrades density and provides gentle diversification.
pub fn mild_perturbation<'g, R>(
    sol: &mut Solution<'g>,
    tabu: &mut DualTabu,
    rng: &mut R,
    p: &Params,
    freq: &mut [usize],
) where
    R: Rng + ?Sized,
{
    /* Guard */
    if sol.size() == 0 {
        return;
    }

    /* 1 ─ identify worst vertex in S */
    let curr_d = sol.density();
    let crit_thr = (curr_d * ((sol.size() as f64) - 1.0)).floor() as usize;

    let mut worst_v = None;
    let mut worst_deg = usize::MAX;

    for u in sol.bitset().iter_ones() {
        let deg_in = sol
            .graph()
            .neigh_row(u)
            .iter_ones()
            .filter(|&j| sol.bitset()[j])
            .count();
        if deg_in < crit_thr && deg_in < worst_deg {
            worst_deg = deg_in;
            worst_v = Some(u);
        }
    }
    // if no vertex is strictly critical, take one with minimal internal degree anyway
    if worst_v.is_none() {
        for u in sol.bitset().iter_ones() {
            let deg_in = sol
                .graph()
                .neigh_row(u)
                .iter_ones()
                .filter(|&j| sol.bitset()[j])
                .count();
            if deg_in < worst_deg {
                worst_deg = deg_in;
                worst_v = Some(u);
            }
        }
    }
    let u = worst_v.expect("S non-empty, so a vertex must exist");
    sol.remove(u);

    /* 2 ─ outsider with max connections into new S */
    let mut max_edges = 0usize;
    for w in 0..sol.graph().n() {
        if sol.bitset()[w] {
            continue;
        }
        let edges_in = sol
            .graph()
            .neigh_row(w)
            .iter_ones()
            .filter(|&j| sol.bitset()[j])
            .count();
        max_edges = max_edges.max(edges_in);
    }
    let mut best_outsiders = Vec::new();
    for w in 0..sol.graph().n() {
        if sol.bitset()[w] {
            continue;
        }
        let edges_in = sol
            .graph()
            .neigh_row(w)
            .iter_ones()
            .filter(|&j| sol.bitset()[j])
            .count();
        if edges_in == max_edges {
            best_outsiders.push(w);
        }
    }
    best_outsiders.shuffle(rng);
    let v = best_outsiders[0];
    sol.add(v);

    /* 3 ─ update frequencies */
    for &vx in &[u, v] {
        freq[vx] += 1;
        if freq[vx] > sol.size() {
            freq.fill(0);
        }
    }

    /* 4 ─ update tabu & reset */
    tabu.update_tenures(sol.size(), sol.edges(), p.gamma_target, rng);
    tabu.reset();
}

===== src\graph.rs =====
//! Simple undirected graph stored as an adjacency BitVec per row.
//! Supports DIMACS *.clq parsing and edge iteration.

use bitvec::prelude::*;
use std::io::{BufRead, Read};

#[derive(Clone, Debug)]
pub struct Graph {
    /// Row‐major adjacency; `adj[i][j]` is 1 ⇔ edge (i,j) exists, j≠i.
    adj: Vec<BitVec>,
}

impl Graph {
    /*────────── constructors ──────────*/

    /// Empty graph with `n` isolated vertices.
    pub fn with_vertices(n: usize) -> Self {
        let mut rows = Vec::with_capacity(n);
        for _ in 0..n {
            rows.push(bitvec![0; n]);
        }
        Self { adj: rows }
    }

    /// Build from explicit edge list (0-based indices, undirected).
    pub fn from_edge_list(n: usize, edges: &[(usize, usize)]) -> Self {
        let mut g = Self::with_vertices(n);
        for &(u, v) in edges {
            g.add_edge(u, v);
        }
        g
    }

    /// Parse DIMACS *.clq format from any buffered reader.
    pub fn parse_dimacs<R: Read>(reader: R) -> std::io::Result<Self> {
        let mut n = 0usize;
        let mut edges: Vec<(usize, usize)> = Vec::new();

        for line in std::io::BufReader::new(reader).lines() {
            let line = line?;
            let line = line.trim();
            if line.is_empty() || line.starts_with('c') { continue; }
            if line.starts_with('p') {
                // p edge <n> <m>
                let parts: Vec<_> = line.split_whitespace().collect();
                if parts.len() >= 3 {
                    n = parts[2].parse().unwrap_or(0);
                }
            } else if line.starts_with('e') {
                // e u v   (1-based)
                let parts: Vec<_> = line.split_whitespace().collect();
                if parts.len() >= 3 {
                    let u: usize = parts[1].parse().unwrap();
                    let v: usize = parts[2].parse().unwrap();
                    edges.push((u - 1, v - 1));
                }
            }
        }
        Ok(Self::from_edge_list(n, &edges))
    }

    /*────────── getters ──────────*/

    #[inline] pub fn n(&self) -> usize { self.adj.len() }

    /// Number of edges (each counted once).
    pub fn m(&self) -> usize {
        let mut m = 0usize;
        for i in 0..self.n() {
            for j in self.neigh_row(i).iter_ones().filter(|&j| j > i) {
                if self.adj[i][j] { m += 1; }
            }
        }
        m
    }

    /// Degree of vertex v.
    #[inline]
    pub fn degree(&self, v: usize) -> usize {
        self.adj[v].count_ones()
    }

    /// Immutable row slice for adjacency of v.
    #[inline]
    pub fn neigh_row(&self, v: usize) -> &BitSlice {
        &self.adj[v]
    }

    /// Return all edges as Vec<(u,v)> with u < v.
    pub fn edge_list(&self) -> Vec<(usize, usize)> {
        let mut edges = Vec::with_capacity(self.m());
        for i in 0..self.n() {
            for j in self.neigh_row(i).iter_ones().filter(|&j| j > i) {
                edges.push((i, j));
            }
        }
        edges
    }

    /*────────── mutators ──────────*/

    #[inline]
    pub fn add_edge(&mut self, u: usize, v: usize) {
        assert!(u < self.n() && v < self.n() && u != v);
        self.adj[u].set(v, true);
        self.adj[v].set(u, true);
    }
}

/*────────────────── tiny unit check ──────────────────*/
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn tiny_triangle() {
        let g = Graph::from_edge_list(3, &[(0, 1), (0, 2), (1, 2)]);
        assert_eq!(g.n(), 3);
        assert_eq!(g.m(), 3);
        assert_eq!(g.edge_list().len(), 3);
    }
}

===== src\lib.rs =====
//! TSQC – Rust-kernel + PyO3 bindings.

use pyo3::prelude::*;
use pyo3::wrap_pyfunction;
use pyo3::types::PyModule;
use pyo3::prelude::Bound;       // Bound<'py, T> API in PyO3 v0.25

/*───────── interne modules ─────────*/
pub mod graph;
pub mod solution;
pub mod tabu;
pub mod construct;
pub mod neighbour;
pub mod diversify;
pub mod params;
pub mod restart;
pub mod maxk;

/*───────── re-exports voor Rust-gebruikers ─────────*/
pub use graph::Graph;
pub use solution::Solution;
pub use params::Params;
pub use restart::solve_fixed_k;
pub use maxk::solve_maxk;

/*───────── extern util ─────────*/
use rand_chacha::ChaCha8Rng;
use rand::SeedableRng;
use std::fs::File;
use std::io::BufReader;

/*======================================================================
│  Python-functies
└=====================================================================*/

/// Fixed-k solver – returns density of best k-subset.
#[pyfunction]
#[pyo3(text_signature = "(graph_path, k, gamma, seed)")]
fn solve_k_py(graph_path: String, k: usize, gamma: f64, seed: u64) -> PyResult<f64> {
    let file = File::open(&graph_path)
        .map_err(|e| pyo3::exceptions::PyIOError::new_err(e.to_string()))?;
    let graph = Graph::parse_dimacs(BufReader::new(file))
        .map_err(|e| pyo3::exceptions::PyValueError::new_err(e.to_string()))?;

    let mut p = Params::default();
    p.gamma_target = gamma;

    let mut rng = ChaCha8Rng::seed_from_u64(seed);
    let sol = solve_fixed_k(&graph, k, &mut rng, &p);
    Ok(sol.density())
}

/// Max-k solver – returns (size, density) of best quasi-clique.
#[pyfunction]
#[pyo3(text_signature = "(graph_path, gamma, seed)")]
fn solve_max_py(graph_path: String, gamma: f64, seed: u64) -> PyResult<(usize, f64)> {
    let file = File::open(&graph_path)
        .map_err(|e| pyo3::exceptions::PyIOError::new_err(e.to_string()))?;
    let graph = Graph::parse_dimacs(BufReader::new(file))
        .map_err(|e| pyo3::exceptions::PyValueError::new_err(e.to_string()))?;

    let mut p = Params::default();
    p.gamma_target = gamma;

    let mut rng = ChaCha8Rng::seed_from_u64(seed);
    let sol = maxk::solve_maxk(&graph, &mut rng, &p);
    Ok((sol.size(), sol.density()))
}

/// Helper: parse DIMACS, return (n, m).
#[pyfunction]
#[pyo3(text_signature = "(graph_path)")]
fn parse_dimacs_py(graph_path: String) -> PyResult<(usize, usize)> {
    let file = File::open(&graph_path)
        .map_err(|e| pyo3::exceptions::PyIOError::new_err(e.to_string()))?;
    let graph = Graph::parse_dimacs(BufReader::new(file))
        .map_err(|e| pyo3::exceptions::PyValueError::new_err(e.to_string()))?;
    Ok((graph.n(), graph.m()))
}

/*======================================================================
│  PyO3 module-init
└=====================================================================*/

/// ***Important***: name `_native` must match `pyproject.toml -> module-name`.
#[pymodule]
fn _native(_py: Python<'_>, m: &Bound<'_, PyModule>) -> PyResult<()> {
    m.add_function(wrap_pyfunction!(solve_k_py, m)?)?;
    m.add_function(wrap_pyfunction!(solve_max_py, m)?)?;
    m.add_function(wrap_pyfunction!(parse_dimacs_py, m)?)?;
    Ok(())
}

===== src\maxk.rs =====
//! Outer **max-k** search for TSQC (Algorithm 1).
//!
//! 1.  Build a greedy γ-feasible subset S₀  →  *k_lb* = |S₀|  
//! 2.  For k = k_lb, k_lb+1, …  
//!       • Skip k if a degree upper-bound proves impossibility.  
//!       • Otherwise call `solve_fixed_k` (tabu search).  
//!       • If k > best_size **and** infeasible  →  stop (first failure above best).  
//! 3.  Return the largest γ-quasi-clique found.

use crate::{
    construct::greedy_until_gamma,
    params::Params,
    restart::solve_fixed_k,
    solution::Solution,
    Graph,
};
use rand::Rng;

/*───────────────────────────────────────────────────────────*/
/*  Degree upper-bound UB(k) = ½ Σ₀^{k-1} min{dᵢ, k-1}        */
/*───────────────────────────────────────────────────────────*/

fn degree_prefix(graph: &Graph) -> Vec<usize> {
    let mut deg: Vec<usize> = (0..graph.n()).map(|v| graph.degree(v)).collect();
    deg.sort_unstable_by(|a, b| b.cmp(a)); // descending
    let mut pref = Vec::with_capacity(deg.len() + 1);
    pref.push(0);
    let mut s = 0usize;
    for d in deg {
        s += d;
        pref.push(s);
    }
    pref // pref[i] = Σ d₀..d_{i-1}
}

#[inline]
fn ub_edges(prefix: &[usize], k: usize) -> usize {
    let mut s = 0usize;
    for i in 0..k {
        let d_i = prefix[i + 1] - prefix[i];
        s += d_i.min(k - 1);
    }
    s / 2
}

/*───────────────────────────────────────────────────────────*/
/*  Public driver                                            */
/*───────────────────────────────────────────────────────────*/

pub fn solve_maxk<'g, R>(graph: &'g Graph, rng: &mut R, p: &Params) -> Solution<'g>
where
    R: Rng + ?Sized,
{
    /* 1 ─ greedy γ-feasible lower bound */
    let mut best_sol = greedy_until_gamma(graph, p.gamma_target, rng);
    let k_lb         = best_sol.size();

    /* 2 ─ degree upper-bound table */
    let pref = degree_prefix(graph);

    for k in k_lb..=graph.n() {
        eprintln!("k = {}", k);
        if k == best_sol.size() {
            continue; // already feasible at this size
        }

        // quick impossibility check
        let required = ((p.gamma_target * (k * (k - 1) / 2) as f64).ceil()) as usize;
        if ub_edges(&pref, k) < required {
            if k > best_sol.size() {
                break; // first failure above best size  → stop
            }
            continue;
        }

        // expensive tabu search
        let sol_k = solve_fixed_k(graph, k, rng, p);
        if sol_k.density() + f64::EPSILON >= p.gamma_target {
            best_sol = sol_k; // update best
        } else if k > best_sol.size() {
            break; // first infeasible k above best size
        }
    }

    best_sol
}

===== src\neighbour.rs =====
//! Intensification: explore the swap neighborhood (Algorithm 1 of TSQC).
//!
//! In each iteration, TSQC tries to swap one vertex *u* ∈ S with one vertex *w* ∉ S. 
//! We define set **A** as the vertices in S with minimum internal degree, and set **B** as the 
//! vertices outside S with maximum degree (relative to S):contentReference[oaicite:62]{index=62}:contentReference[oaicite:63]{index=63}. 
//! The algorithm selects the swap that *does not decrease* the density (Δf ≥ 0) and yields the 
//! largest improvement if any. If no non-deteriorating swap is available (local optimum), 
//! intensification stops. A tabu move is allowed under the **aspiration** criterion if it produces 
//! a solution with higher density than any seen so far:contentReference[oaicite:64]{index=64}. Dual tabu lists prevent immediately 
//! undoing the last move unless such an aspirational move occurs.

use crate::{solution::Solution, tabu::DualTabu, params::Params};
use rand::Rng;

/// Apply one intensification step (one swap move) if possible. 
/// 
/// Examines potential swaps of one in-set vertex `u` (from the current solution) with one 
/// out-of-set vertex `w`. The swap that yields the highest density (with **non-negative** gain in edges) 
/// is chosen and executed. If a move is tabu, it will still be executed under the aspiration criterion 
/// if it achieves a greater density than `global_best_density` (the best density found so far). 
/// Returns `true` if a swap was performed (improving or equal-density move), or `false` if no allowable 
/// swap could improve or maintain the density (i.e., a local optimum is reached).
pub fn improve_once<'g, R>(
    sol: &mut Solution<'g>,
    tabu: &mut DualTabu,
    global_best_density: f64,
    freq: &mut [usize],
    p: &Params,
    rng: &mut R
) -> bool 
where
    R: Rng + ?Sized,
{
    let g = sol.graph();
    let k = sol.size();
    let m = sol.edges();
    let current_density = sol.density();

    // Identify critical vertices in S (those with degree < ⌊ρ*(|S|-1)⌋ in the current solution)
    let crit_thr = (current_density * ((k as f64) - 1.0)).floor() as usize;
    let mut critical_vertices: Vec<usize> = Vec::new();
    for u in sol.bitset().iter_ones() {
        let deg_in = g.neigh_row(u)
            .iter_ones()
            .filter(|&j| sol.bitset()[j])
            .count();
        if deg_in < crit_thr {
            critical_vertices.push(u);
        }
    }
    if critical_vertices.is_empty() {
        // No critical vertices (solution is very dense or |S| < 2); no beneficial swap exists
        // because any swap would likely remove a well-connected vertex.
        // Intensification cannot find a >=0 move in this case.
        tabu.step();  // count this as an iteration (no move made)
        return false;
    }

    // Try all swap combinations (u in A, w outside) to find the best allowed move
    let mut best_allowed: Option<(f64, usize, usize)> = None;
    let mut best_aspirant: Option<(f64, usize, usize)> = None;
    for &u in &critical_vertices {
        // Compute loss in edges if u is removed
        let loss_u = g.neigh_row(u)
            .iter_ones()
            .filter(|&j| sol.bitset()[j])
            .count();
        // Loop over all outside vertices w
        for w in 0..g.n() {
            if sol.bitset()[w] {
                continue; // skip vertices already in S
            }
            // Compute gain in edges if w is added (count neighbors of w in current S, excluding u)
            let gain_w = g.neigh_row(w)
                .iter_ones()
                .filter(|&j| j != u && sol.bitset()[j])
                .count();
            // Check the net effect on edge count
            if gain_w >= loss_u {
                // This swap does not decrease the number of edges (Δm >= 0, so Δρ >= 0 since |S| is constant)
                let new_m = m - loss_u + gain_w;
                let new_density = if k < 2 {
                    0.0 
                } else {
                    // Compute density of the would-be solution S' after the swap
                    2.0 * (new_m as f64) / ((k * (k - 1)) as f64)
                };
                let move_is_tabu = tabu.is_tabu_v(u) || tabu.is_tabu_u(w);
                if !move_is_tabu {
                    // Non-tabu swap candidate
                    if best_allowed.is_none() || new_density > best_allowed.as_ref().unwrap().0 {
                        best_allowed = Some((new_density, u, w));
                    }
                } else if new_density > global_best_density {
                    // Tabu move, but qualifies under aspiration (would exceed best global density seen)
                    if best_aspirant.is_none() || new_density > best_aspirant.as_ref().unwrap().0 {
                        best_aspirant = Some((new_density, u, w));
                    }
                }
            }
        }
    }

    // Decide which move to execute, if any
    let chosen_move = if let Some((_, u, w)) = best_allowed {
        // Execute the best allowed swap (non-negative Δρ)
        Some((u, w))
    } else if let Some((_, u, w)) = best_aspirant {
        // No allowed move improved density, but a tabu move can improve the global best – use aspiration
        Some((u, w))
    } else {
        None
    };

    if let Some((u, w)) = chosen_move {
        // Perform the swap: remove u from S and add w to S
        sol.remove(u);
        sol.add(w);
        // Update long-term frequencies for u and w
        freq[u] += 1;
        if freq[u] > p.stagnation_iter as usize {  // using stagnation_iter as a safe upper bound (k times might be too strict if k is small)
            freq.fill(0);
        }
        freq[w] += 1;
        if freq[w] > p.stagnation_iter as usize {
            freq.fill(0);
        }
        // Update tabu tenures based on the new solution state (|S| unchanged, but edges may change)
        tabu.update_tenures(sol.size(), sol.edges(), p.gamma_target, rng);
        // Mark this swap in the tabu lists: 
        // - u (just removed) is forbidden to re-enter S for Tu iterations 
        // - w (just added) is forbidden to leave S for Tv iterations
        tabu.forbid_v(u);
        tabu.forbid_u(w);
        tabu.step();  // advance the tabu list's iteration counter
        return true;
    } else {
        // No swap was found that improves or maintains density – local optimum reached for now.
        tabu.step();
        return false;
    }
}

// (The improve_until_local_optimum function from the original code has been removed, 
// as we now handle the intensification loop explicitly in solve_fixed_k for better control.)

===== src\params.rs =====
//! Parameter bundle for TSQC (Tabu Search for γ-quasi-cliques).
//!
//! These tunable parameters control the tabu search behavior, diversification intensity, and restart criteria.
//! 
//! - `tenure_u` and `tenure_v` are the initial tabu tenures for removed and added vertices (adaptive updates will override them during search).
//! - `gamma` controls the strength of heavy perturbation in the original design (fraction of the solution to replace). In our adapted implementation, heavy moves always remove 1 vertex (this parameter is unused by the current heavy perturbation logic).
//! - `gamma_target` is the density threshold (γ) that defines a quasi-clique (feasibility target).
//! - `stagnation_iter` is the number of consecutive non-improving iterations to tolerate before considering the search "stagnant". (In our implementation, we diversify immediately upon stagnation, so this effectively serves as an upper bound and as a safe value for frequency reset threshold).
//! - `max_iter` is the global cap on the total number of iterations (across all restarts and moves).

#[derive(Clone, Debug)]
pub struct Params {
    /* ─── Tabu tenure base (will be adapted dynamically) ─── */
    pub tenure_u: usize,
    pub tenure_v: usize,

    /* ─── Diversification ─── */
    pub gamma:        f64,   // (Unused in new heavy_perturbation) fraction of |S| to remove in original heavy perturbation
    pub heavy_prob:   f64,   // probability of choosing heavy vs. mild diversification

    /* ─── Quasi-clique feasibility goal ─── */
    pub gamma_target: f64,   // target density γ for a quasi-clique

    /* ─── Restart / search limits ─── */
    pub stagnation_iter: usize, // stagnation threshold (L in the paper – max consecutive iterations with no improvement)
    pub max_iter:        usize, // hard cap on total iterations (It_max)
}

impl Default for Params {
    fn default() -> Self {
        Self {
            tenure_u: 7,
            tenure_v: 7,
            // A small heavy perturbation probability by default, as TSQC applies heavy moves rarely
            gamma:      0.50,
            heavy_prob: 0.10,
            /* The default gamma_target of 0.90 matches the “sparse quasi-clique” benchmark in the thesis. 
               It can be adjusted by the caller if a different density threshold is needed. */
            gamma_target: 0.90,
            stagnation_iter: 1000,
            max_iter:        100_000,
        }
    }
}

===== src\restart.rs =====
//! Multi-start tabu search for one fixed k (TSQC Algorithm 2)
//!
//! A run is aborted as soon as the *tight* upper bound
//!   UB = cur_edges + best_gain_one_swap
//! falls below γ·C(k,2)   (rule U1-tight).

use crate::{
    construct::greedy_random_k,
    diversify::{heavy_perturbation, mild_perturbation},
    neighbour::improve_once,
    params::Params,
    solution::Solution,
    tabu::DualTabu,
    Graph,
};
use rand::seq::SliceRandom;
use rand::Rng;

/*──────────────────────────────────────────────────────────*/

pub fn solve_fixed_k<'g, R>(
    graph: &'g Graph,
    k: usize,
    rng: &mut R,
    p: &Params,
) -> Solution<'g>
where
    R: Rng + ?Sized,
{
    /* γ-required edge count */
    let needed = ((p.gamma_target * (k * (k - 1) / 2) as f64).ceil()) as usize;

    /* quick impossibility via degree bound */
    if (k * (k - 1) / 2) < needed {
        return Solution::new(graph);
    }

    /* long-term vertex frequency (restart diversification) */
    let mut freq = vec![0usize; graph.n()];

    /* best over all runs (for return if infeasible) */
    let mut best_global = Solution::new(graph);
    let mut best_rho    = 0.0;

    /* total moves across restarts */
    let mut total_moves = 0usize;

    /* per-run move cap  (heuristic, a few thousand) */
    let run_iter_cap = 4 * k * k;

    /*──────────────── outer restart loop ────────────────*/
    loop {
        /* 1. initial subset */
        let mut cur = if best_global.size() == 0 {
            greedy_random_k(graph, k, rng)                 // first run
        } else {
            /* seed = least-used vertex, then greedy fill */
            let min_f = *freq.iter().min().unwrap();
            let mut pool: Vec<_> =
                (0..graph.n()).filter(|&v| freq[v] == min_f).collect();
            pool.shuffle(rng);
            let seed = pool[0];

            let mut s = Solution::new(graph);
            s.add(seed);
            while s.size() < k {
                let mut best_deg = 0usize;
                let mut cand     = Vec::new();
                for v in 0..graph.n() {
                    if s.bitset()[v] { continue; }
                    let deg = graph.neigh_row(v)
                                   .iter_ones()
                                   .filter(|&u| s.bitset()[u])
                                   .count();
                    match deg.cmp(&best_deg) {
                        std::cmp::Ordering::Greater => { best_deg = deg; cand.clear(); cand.push(v); }
                        std::cmp::Ordering::Equal   => cand.push(v),
                        _ => {}
                    }
                }
                s.add(*cand.choose(rng).unwrap());
            }
            s
        };

        /* tabu structures */
        let mut tabu = DualTabu::new(graph.n(), p.tenure_u, p.tenure_v);
        tabu.update_tenures(k, cur.edges(), p.gamma_target, rng);

        /* best inside this run */
        let mut best_run = cur.clone();
        let mut rho_run  = cur.density();

        let mut stagn   = 0usize;
        let mut moves   = 0usize;              // moves in this run

        /* helper: tight UB using *one* best swap */
        let mut impossible = |sol: &Solution<'_>| -> bool {
            /* collect internal degrees for in-set vertices */
            let mut min_in = usize::MAX;
            for v in sol.bitset().iter_ones() {
                let d = sol.graph().neigh_row(v)
                           .iter_ones()
                           .filter(|&u| sol.bitset()[u])
                           .count();
                min_in = min_in.min(d);
            }
            /* best outsider degree into current set */
            let mut max_out = 0usize;
            for v in 0..sol.graph().n() {
                if sol.bitset()[v] { continue; }
                let d = sol.graph().neigh_row(v)
                           .iter_ones()
                           .filter(|&u| sol.bitset()[u])
                           .count();
                max_out = max_out.max(d);
            }
            let gain = max_out.saturating_sub(min_in);
            let ub   = sol.edges() + gain;
            ub < needed
        };

        /*──────── inner tabu loop ────────*/
        loop {
            let moved = improve_once(
                &mut cur, &mut tabu, rho_run,
                &mut freq, p, rng);
            moves      += 1;
            total_moves += 1;

            if moved {
                let rho = cur.density();
                if rho > rho_run {
                    rho_run  = rho;
                    best_run = cur.clone();
                    stagn    = 0;
                } else {
                    stagn += 1;
                }
            } else {
                stagn += 1;
            }

            /* γ-feasible found */
            if rho_run + f64::EPSILON >= p.gamma_target {
                return best_run;
            }

            /* diverge after L moves with no improvement */
            if stagn >= p.stagnation_iter {
                if rng.gen_bool(p.heavy_prob) {
                    heavy_perturbation(&mut cur, &mut tabu, rng, p, &mut freq);
                } else {
                    mild_perturbation (&mut cur, &mut tabu, rng, p, &mut freq);
                }
                stagn = 0;

                if impossible(&cur) { break; }        // U1-tight
            }

            /* if no admissible swap *and* UB says impossible */
            if !moved && impossible(&cur) { break; }

            /* per-run or global caps */
            if moves >= run_iter_cap || total_moves >= p.max_iter {
                break;
            }
        }

        /* update global best (still infeasible) */
        if rho_run > best_rho {
            best_rho    = rho_run;
            best_global = best_run.clone();
        }

        /* update frequencies */
        for v in best_run.bitset().iter_ones() { freq[v] += 1; }
    }
}

===== src\solution.rs =====
//! Candidate solution: a vertex subset S with cached |S| and m(S).
//!
//! • O(1) access to size and edge count.  
//! • O(n / 64) per add/remove operation.  
//! • Works together with [`Graph`] and [`DualTabu`].

use bitvec::prelude::*;
use crate::graph::Graph;

/// Mutable quasi-clique candidate bound to a single [`Graph`].
#[derive(Clone, Debug)]
pub struct Solution<'g> {
    graph:      &'g Graph,
    vertices:   BitVec,
    edge_count: usize,
    size:       usize,
}

/*───────────────────────── impl ─────────────────────────*/

impl<'g> Solution<'g> {
    /* constructors */

    /// Empty solution.
    pub fn new(graph: &'g Graph) -> Self {
        Self {
            graph,
            vertices: bitvec![0; graph.n()],
            edge_count: 0,
            size: 0,
        }
    }

    /// Build from an initial bitset; computes edge count.
    pub fn from_bitset(graph: &'g Graph, subset: &BitSlice) -> Self {
        assert_eq!(subset.len(), graph.n());

        let size = subset.count_ones();
        let mut e = 0usize;
        for i in 0..graph.n() {
            if subset[i] {
                for j in graph.neigh_row(i).iter_ones().filter(|&j| j > i) {
                    if subset[j] { e += 1; }
                }
            }
        }

        let mut vertices = BitVec::repeat(false, graph.n());
        vertices |= subset;

        Self { graph, vertices, edge_count: e, size }
    }

    /* queries */

    #[inline] pub fn size(&self) -> usize          { self.size }
    #[inline] pub fn edges(&self) -> usize         { self.edge_count }
    #[inline] pub fn bitset(&self) -> &BitVec      { &self.vertices }
    #[inline] pub fn graph(&self) -> &Graph        { self.graph }

    /// Density 2 m(S) / (|S|·(|S|−1)); returns 0 for |S| < 2.
    pub fn density(&self) -> f64 {
        if self.size < 2 { 0.0 }
        else { 2.0 * self.edge_count as f64 / (self.size * (self.size - 1)) as f64 }
    }

    pub fn is_gamma_feasible(&self, gamma: f64) -> bool {
       self.density() + f64::EPSILON >= gamma
    }
    /* mutators */

    /// Add vertex *v* (no-op if already present).
    pub fn add(&mut self, v: usize) {
        if self.vertices[v] { return; }
        let added = self.graph.neigh_row(v)
            .iter_ones()
            .filter(|&j| self.vertices[j])
            .count();
        self.vertices.set(v, true);
        self.size       += 1;
        self.edge_count += added;
    }

    /// Remove vertex *v* (no-op if absent).
    pub fn remove(&mut self, v: usize) {
        if !self.vertices[v] { return; }
        let removed = self.graph.neigh_row(v)
            .iter_ones()
            .filter(|&j| self.vertices[j])
            .count();
        self.vertices.set(v, false);
        self.size       -= 1;
        self.edge_count -= removed;
    }

    /// Toggle membership; returns `true` if *v* is in the set afterwards.
    pub fn toggle(&mut self, v: usize) -> bool {
        if self.vertices[v] { self.remove(v); false } else { self.add(v); true }
    }

    /// Clear S completely.
    pub fn clear(&mut self) {
        self.vertices.fill(false);
        self.size = 0;
        self.edge_count = 0;
    }
}

/*───────────────────────── tests ─────────────────────────*/

#[cfg(test)]
mod tests {
    use super::*;
    use std::io::Cursor;

    fn triangle_graph() -> Graph {
        let dimacs = b"p edge 3 3\ne 1 2\ne 1 3\ne 2 3\n";
        Graph::parse_dimacs(Cursor::new(dimacs)).unwrap()
    }

    #[test]
    fn add_remove_consistency() {
        let g = triangle_graph();
        let mut sol = Solution::new(&g);

        sol.add(0);
        sol.add(1);
        sol.add(2);
        approx::assert_relative_eq!(sol.density(), 1.0);

        sol.remove(1);
        assert_eq!(sol.size(), 2);
        assert_eq!(sol.edges(), 1);
    }
}

===== src\tabu.rs =====
//! Dual-tabu list with adaptive tenures (Section 3.4.3 of the TSQC paper).
//!
//! We maintain two tabu lists: 
//! **tabu_u** for vertices recently added to S (forbidding their removal for Tv iterations), 
//! and **tabu_v** for vertices recently removed from S (forbidding their re-addition for Tu iterations):contentReference[oaicite:83]{index=83}:contentReference[oaicite:84]{index=84}. 
//! The tabu tenures *Tu* and *Tv* are updated dynamically based on the current solution's status (density gap and random variation):contentReference[oaicite:85]{index=85}:contentReference[oaicite:86]{index=86}. 
//! This adaptation helps prevent the search from becoming stuck by allowing tenures to grow when far from a feasible solution and shrink when close:contentReference[oaicite:87]{index=87}.

use rand::Rng;

#[derive(Clone, Debug)]
pub struct DualTabu {
    expiry_u: Vec<usize>,  // iteration index until which vertex is forbidden to be removed (for each v in V)
    expiry_v: Vec<usize>,  // iteration index until which vertex is forbidden to be added
    iter:     usize,       // current global iteration count for tabu timing
    tu:       usize,       // current tenure for removed vertices (tabu_v duration)
    tv:       usize,       // current tenure for added vertices (tabu_u duration)
}

impl DualTabu {
    /*────────── constructor ──────────*/

    pub fn new(n: usize, initial_tu: usize, initial_tv: usize) -> Self {
        Self {
            expiry_u: vec![0; n],
            expiry_v: vec![0; n],
            iter:     0,
            tu:       initial_tu.max(1),
            tv:       initial_tv.max(1),
        }
    }

    /*────────── adaptive tenure update ──────────*/

    /// Recompute tabu tenures Tu and Tv based on the current solution size and edges.
    ///
    /// This implements the adaptive formula inspired by Wu & Hao (2013):contentReference[oaicite:88]{index=88}. 
    /// Let *L<sub>q</sub>* be the minimum number of edges required for a size-|S| quasi-clique (γ-target edges). 
    /// We compute `l = min{ L_q - m(S), 10 }` as the capped edge deficit. 
    /// Then `Tu = (l + 1) + Random(0..C)` and `Tv = 0.6*(l + 1) + Random(0..0.6*C)`, where `C = max{|S|/40, 6}`. 
    /// This means if the current solution is far from the density target (large deficit *l*), tenures increase (up to a cap), 
    /// and if it's close to feasible, tenures stay smaller. A random component prevents cycles where all vertices become tabu:contentReference[oaicite:89]{index=89}.
    pub fn update_tenures<R: Rng + ?Sized>(
        &mut self, 
        size_s: usize, 
        edges: usize, 
        gamma: f64, 
        rng: &mut R
    ) {
        // Compute the required number of edges for a quasi-clique of size_s (ceil of γ * (size_s choose 2))
        let clique_edges = if size_s < 2 {
            0 
        } else {
            (size_s * (size_s - 1)) / 2
        };
        let target_edges = (gamma * (clique_edges as f64)).ceil() as usize;
        // l = how many edges short of target (capped at 10)
        let deficit = if target_edges > edges {
            target_edges - edges
        } else {
            0
        };
        let l = deficit.min(10) as usize;
        // C = max{|S|/40, 6} as an integer
        let c = ((size_s / 40).max(6)) as usize;
        // Randomize tenures based on l and C
        let rand_u = rng.gen_range(0..=c);
        let rand_v = rng.gen_range(0..=((0.6 * (c as f64)).floor() as usize));
        // Tu = l + 1 + random(0..C)
        self.tu = (l + 1 + rand_u).max(1);
        // Tv = 0.6*(l + 1) + random(0..0.6*C)
        let base_v = ((l + 1) as f64 * 0.6).floor() as usize;
        self.tv = (base_v + rand_v).max(1);
    }

    /*────────── iteration control ──────────*/

    #[inline] 
    pub fn step(&mut self) { 
        // Advance the global iteration counter for tabu. This should be called at the end of each iteration (move or not).
        self.iter += 1; 
    }

    /*────────── tabu status queries ──────────*/

    #[inline] 
    pub fn is_tabu_u(&self, v: usize) -> bool {
        // Checks if vertex v is currently forbidden to be added to S (recently removed)
        self.expiry_u[v] > self.iter
    }
    #[inline] 
    pub fn is_tabu_v(&self, v: usize) -> bool {
        // Checks if vertex v is currently forbidden to be removed from S (recently added)
        self.expiry_v[v] > self.iter
    }

    /*────────── mark moves as tabu ──────────*/

    #[inline] 
    pub fn forbid_u(&mut self, v: usize) {
        // Forbid vertex v from being added back to S for the next Tu iterations
        self.expiry_u[v] = self.iter + self.tu;
    }
    #[inline] 
    pub fn forbid_v(&mut self, v: usize) {
        // Forbid vertex v from being removed from S for the next Tv iterations
        self.expiry_v[v] = self.iter + self.tv;
    }

    /*────────── reset after diversification ──────────*/

    pub fn reset(&mut self) {
        // Clear all tabu entries (long-term memory like frequencies remains untouched).
        self.expiry_u.fill(0);
        self.expiry_v.fill(0);
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn basic_tabu_logic() {
        let mut t = DualTabu::new(3, 2, 3); // initial Tu=2, Tv=3
        // iteration 0
        assert!(!t.is_tabu_u(1));
        t.forbid_u(1);
        t.forbid_v(2);
        // iteration 0: forbids take effect immediately
        assert!( t.is_tabu_u(1));
        assert!( t.is_tabu_v(2));
        t.step(); // iter 1
        assert!( t.is_tabu_u(1)); // still tabu (expiry iter ~2)
        assert!( t.is_tabu_v(2)); // still tabu (expiry iter ~3)
        t.step(); // iter 2
        assert!(!t.is_tabu_u(1)); // U-tabu expired
        assert!( t.is_tabu_v(2));  // V-tabu still active
        t.step(); // iter 3
        assert!(!t.is_tabu_v(2)); // V-tabu expired
    }
}

===== tests\smoke.rs =====
use tsqc::{Graph, Params, solve_fixed_k};
use rand_chacha::ChaCha8Rng;
use rand::SeedableRng;

#[test]
fn smoke_fixed_k() {
    // 5-vertex complete graph minus one edge (2-3 missing)
    let edges = vec![
        (0,1),(0,2),(0,3),(0,4),
        (1,2),(1,3),(1,4),
        (2,4),
        (3,4),
    ];
    let g = Graph::from_edge_list(5, &edges);

    let mut rng = ChaCha8Rng::seed_from_u64(1);
    let sol = solve_fixed_k(&g, 5, &mut rng, &Params::default());

    // Solver should reach at least the original 0.9 density,
    // and may reach 1.0 after improving the edge set.
    assert!(sol.density() >= 0.9);
}

===== tsqc\__init__.py =====
"""
Python façade for the native Rust extension.

Import order:
1.   import tsqc         → this file
2.   this file imports tsqc._native (compiled pyd/so)
3.   re-exports the three PyO3 functions at top level
"""

from importlib import import_module, metadata as _md

# load the shared library (tsqc/_native.*)
_native = import_module("tsqc._native")

# re-export selected symbols so callers can do:  from tsqc import solve_k_py
solve_k_py      = _native.solve_k_py
solve_max_py    = _native.solve_max_py
parse_dimacs_py = _native.parse_dimacs_py

__all__ = [
    "solve_k_py",
    "solve_max_py",
    "parse_dimacs_py",
]

__version__ = _md.version("tsqc")

# clean up internal names
del _native, import_module, _md

===== tsqc\benchmarks.py =====
"""
Batch-run TSQC on a folder of DIMACS graphs.

Example:
    python -m tsqc.benchmarks -d benchmarks -g 0.7,0.8,0.9 -r 3
"""

from __future__ import annotations
from pathlib import Path
from typing import List
import argparse, pandas as pd, itertools, sys

from tsqc.runner import run_instance


def parse_gamma_list(s: str) -> List[float]:
    return [float(x) for x in s.split(",") if x.strip()]


def benchmark_dimacs(
    dimacs_dir: Path,
    pattern: str,
    gammas: List[float],
    runs: int,
    k_target: int | None,
) -> pd.DataFrame:
    """
    Run TSQC over every file matching pattern × every γ.
    Keeps the best run per (file, γ).
    """
    rows = []
    files = sorted(dimacs_dir.glob(pattern))
    total = len(files) * len(gammas)
    print(f"Benchmarking {total} combos …\n")

    for file_path, gamma in itertools.product(files, gammas):
        if file_path.name.startswith("._"):  # macOS junk
            continue
        print(f"→ {file_path.name}  γ={gamma}")
        res = run_instance(file_path, gamma, runs=runs, k_target=k_target)
        rows.append(res)

    return pd.DataFrame(rows)


# ─────────────────────────── CLI ────────────────────────────
def main(argv: list[str] | None = None) -> None:
    parser = argparse.ArgumentParser("TSQC DIMACS benchmark")
    parser.add_argument("-d", "--dir",      type=Path, required=True)
    parser.add_argument("-p", "--pattern",  default="*.clq")
    parser.add_argument("-g", "--gammas",   required=True,
                        help="Comma-sep list, e.g. 0.7,0.8")
    parser.add_argument("-r", "--runs",     type=int, default=1,
                        help="Independent runs each combo")
    parser.add_argument("-k", "--k",        type=int,
                        help="Fixed size k instead of any-k search")
    parser.add_argument("-o", "--out",      type=Path,
                        default=Path("benchmark_results.csv"))
    args = parser.parse_args(argv)

    df = benchmark_dimacs(
        args.dir, args.pattern,
        parse_gamma_list(args.gammas),
        args.runs, args.k,
    )

    args.out.parent.mkdir(parents=True, exist_ok=True)
    df.to_csv(args.out, index=False)
    print(f"\n✓ Results saved -> {args.out}")


if __name__ == "__main__":  # pragma: no cover
    main(sys.argv[1:])

===== tsqc\data_loader.py =====
"""
Fast DIMACS loader that delegates parsing to Rust when the compiled
`tsqc` wheel is available.  Falls back to pure-Python parsing if the Rust
symbol isn't present (e.g. during first `cargo test` before building the
wheel).

Usage:
    from tsqc.data_loader import load_dimacs
    n, edges = load_dimacs(Path("benchmarks/hamming8-4.clq"))
"""

from pathlib import Path
from typing import List, Tuple

try:
    # when the wheel is installed, this is the ultra-fast Rust parser
    from tsqc import parse_dimacs_py   # PyO3 export
except ImportError:
    parse_dimacs_py = None


# ---------------------------------------------------------------------------
def _python_dimacs(path: Path) -> Tuple[int, List[Tuple[int, int]]]:
    """Portable fallback DIMACS parser (line-by-line, ASCII)."""
    n_vertices = 0
    edges: List[Tuple[int, int]] = []

    with path.open("r", encoding="utf8") as fh:
        for line in fh:
            line = line.strip()
            if not line or line.startswith("c"):
                continue
            if line.startswith("p"):
                # line: 'p edge <n> <m>'
                parts = line.split()
                if len(parts) >= 3:
                    n_vertices = int(parts[2])
            elif line.startswith("e"):
                # line: 'e <u> <v>'  (1-based indices)
                parts = line.split()
                if len(parts) >= 3:
                    u = int(parts[1]) - 1
                    v = int(parts[2]) - 1
                    edges.append((u, v))

    return n_vertices, edges


# ---------------------------------------------------------------------------
def load_dimacs(path: Path) -> Tuple[int, List[Tuple[int, int]]]:
    """
    Returns (n_vertices, edge_list with 0-based indices).
    Tries the Rust backend first for speed, otherwise uses Python fallback.
    """
    if parse_dimacs_py is not None:
        return parse_dimacs_py(str(path))
    return _python_dimacs(path)

===== tsqc\dump_tree.py =====
#!/usr/bin/env python
"""
Create a single-file snapshot of the project tree without duplicate paths.

Examples
--------
# dump only the real source tree
python tools/dump_tree.py -o snapshot.txt -i src

# default (whole project, but unique relative paths)
python tools/dump_tree.py
"""
from pathlib import Path
import mimetypes, argparse, textwrap, sys

# ─────────────────────────────────────────────────────────────────────────────
EXCLUDE_DIRS = {
    ".git", ".venv", "target", ".github", "dist", "build",
    "__pycache__", ".idea", ".vscode", "_old", "backup", ".history",
    ".ipynb_checkpoints", ".txt",
}
ALLOWED_EXTS = {".py", ".rs", ".toml", ".json", ".md", ".txt", ".yml", ".yaml"}
MAX_BYTES_DEFAULT  = 100_000   # skip huge generated files
MAX_LINES_DEFAULT  = 4_000
# ─────────────────────────────────────────────────────────────────────────────

def excluded(path: Path) -> bool:
    return any(part in EXCLUDE_DIRS for part in path.parts)

def looks_text(path: Path) -> bool:
    mime, _ = mimetypes.guess_type(path)
    return mime is None or mime.startswith("text/") or mime.endswith("+json")

def dump_project(out: Path, root: Path,
                 include_glob: str | None,
                 max_bytes: int, max_lines: int):
    seen: set[str] = set()
    dumped   = 0
    skipped  = 0

    with out.open("w", encoding="utf-8") as fh:
        files = sorted(root.rglob("*"))
        if include_glob:
            files = [p for p in files if p.match(include_glob)]

        for p in files:
            if p.is_dir() or excluded(p):
                continue
            if p.suffix.lower() not in ALLOWED_EXTS:
                continue
            rel = str(p.relative_to(root))
            if rel in seen:
                skipped += 1
                continue
            seen.add(rel)

            if not looks_text(p) or p.stat().st_size > max_bytes:
                continue

            fh.write(f"{'='*5} {rel} {'='*5}\n")
            try:
                lines = p.read_text(encoding="utf-8", errors="replace").splitlines()
            except Exception as e:
                fh.write(f"[skip: {e}]\n\n")
                continue

            if len(lines) > max_lines:
                lines = lines[:max_lines] + [f"... ({len(lines)-max_lines} lines truncated)"]
            fh.write("\n".join(lines) + "\n\n")
            dumped += 1

    print(f"Snapshot written to {out}  ({dumped} files, {skipped} duplicates skipped)")

# ─────────────────────────────────────────────────────────────────────────────
def main(argv: list[str] | None = None):
    ap = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description=textwrap.dedent("""\
            Dump all text source files into a single txt while ignoring duplicates.

            Typical usage:
              python tools/dump_tree.py -i src          # only real code
              python tools/dump_tree.py -o snapshot.txt # whole repo
        """))
    ap.add_argument("-o", "--output", default="project_snapshot.txt",
                    help="Output file (default: %(default)s)")
    ap.add_argument("-i", "--include", metavar="GLOB", default=None,
                    help="Only include paths matching this glob (e.g. 'src/**')")
    ap.add_argument("-n", "--lines", type=int, default=MAX_LINES_DEFAULT,
                    help="Max lines per file (default: %(default)s)")
    ap.add_argument("-b", "--bytes", type=int, default=MAX_BYTES_DEFAULT,
                    help="Max file size in bytes (default: %(default)s)")
    args = ap.parse_args(argv)

    dump_project(Path(args.output), Path.cwd(),
                 args.include, args.bytes, args.lines)

if __name__ == "__main__":
    main(sys.argv[1:])

===== tsqc\runner.py =====
"""
Streaming TSQC runner – toont live voortgang.

Elke run:
    1) print een placeholder "… searching …"
    2) voert Rust-solver uit
    3) overschrijft de regel met definitieve gegevens
"""

from __future__ import annotations
from pathlib import Path
from time import perf_counter
import argparse, statistics, sys
from typing import Tuple

from tsqc import solve_max_py, solve_k_py, parse_dimacs_py


def edges_from_density(k: int, rho: float) -> int:
    return int(round(rho * (k * (k - 1) / 2))) if k > 1 else 0


def single_run(path: Path, gamma: float, k: int | None, seed: int) -> Tuple[int, int, float, float]:
    t0 = perf_counter()
    if k is None:
        size, rho = solve_max_py(str(path), gamma, seed)
    else:
        rho  = solve_k_py(str(path), k, gamma, seed)
        size = k
    sec   = perf_counter() - t0
    edges = edges_from_density(size, rho)
    return size, edges, rho, sec


def better(a, b):
    """a is better than b?  (size desc, edges desc, sec asc)."""
    return (a[0], a[1], -a[3]) > (b[0], b[1], -b[3])


def main(argv: list[str] | None = None) -> None:
    ap = argparse.ArgumentParser("TSQC runner (live)")
    ap.add_argument("-i", "--instance", type=Path, required=True)
    ap.add_argument("-g", "--gamma",    type=float, default=0.90)
    ap.add_argument("-r", "--runs",     type=int,   default=1)
    ap.add_argument("-k", "--k",        type=int)
    ap.add_argument("-s", "--seed",     type=int,   default=42)
    args = ap.parse_args(argv)

    n, m = parse_dimacs_py(str(args.instance))
    mode = f"fixed k={args.k}" if args.k else "max-k"
    header = f"{args.instance.name}: n={n} m={m} mode={mode} γ={args.gamma}"
    print(header)
    print("run  size  edges  density     sec")

    best = None
    all_rho, all_sec = [], []

    for r in range(1, args.runs + 1):
        # ── placeholder ──────────────────────────────────────────────
        placeholder = f"{r:>3}   …   …    ……….     …"
        print(placeholder, end="\r", flush=True)

        # ── run solver ───────────────────────────────────────────────
        size, edges, rho, sec = single_run(args.instance, args.gamma, args.k, args.seed + r - 1)
        all_rho.append(rho)
        all_sec.append(sec)

        # ── overwrite line with real data ───────────────────────────
        line = f"{r:>3} {size:>5} {edges:>6}  {rho:7.4f}  {sec:7.2f}"
        print(line + " " * max(0, len(placeholder) - len(line)))  # clean remainder

        cur = (size, edges, rho, sec, r)
        if best is None or better(cur, best):
            best = cur

    # ── summary ─────────────────────────────────────────────────────
    print(f"\nbest: run {best[4]}  size {best[0]}  edges {best[1]}  density {best[2]:.4f}")
    if args.runs > 1:
        avg_rho = statistics.mean(all_rho)
        std_rho = statistics.stdev(all_rho) if args.runs > 2 else 0
        print("avg density", f"{avg_rho:.4f} ± {std_rho:.4f}",
              "   avg sec", f"{statistics.mean(all_sec):.2f}")


if __name__ == "__main__":      # pragma: no cover
    main(sys.argv[1:])

